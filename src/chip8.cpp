#include "chip8.h"
#include <cstdio>
#include <ctime>
#include <cstring>
#include <fstream>
#include <string>

inline unsigned char chip8_fontset[80] =
{
    0xF0, 0x90, 0x90, 0x90, 0xF0, //0
    0x20, 0x60, 0x20, 0x20, 0x70, //1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
    0x90, 0x90, 0xF0, 0x10, 0x10, //4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
    0xF0, 0x10, 0x20, 0x40, 0x40, //7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
    0xF0, 0x90, 0xF0, 0x90, 0x90, //A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
    0xF0, 0x80, 0x80, 0x80, 0xF0, //C
    0xE0, 0x90, 0x90, 0x90, 0xE0, //D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
    0xF0, 0x80, 0xF0, 0x80, 0x80  //F
};

void chip8::initialize(const char *filepath) {
    pc = 0x200; // PC expects start at 0x200
    opcode = 0;
    I = 0;
    sp = 0;

    // Reset variables
    memset(stack, 0, sizeof(stack));
    memset(V, 0, sizeof(V));
    memset(key, 0, sizeof(key));
    memset(memory, 0, sizeof(memory));
    memset(gfx, 0, sizeof(gfx)); // Clear display

    // Reset timers
    delay_timer = 0;
    sound_timer = 0;

    // Loading fontset to memory
    std::copy(chip8_fontset, chip8_fontset + std::size(chip8_fontset), memory);
}

// TODO -- finish this method, still need to find a way to store data from file and store it in memory
bool chip8::load_rom(const char *filepath) {
    std::ifstream file(filepath, std::ios::binary | std::ios::ate);    // Read in binary mode, move file pointer to the end


    return true;
}

